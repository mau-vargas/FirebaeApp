name: Android CD
on:
  workflow_dispatch:
    inputs:
      release_notes:
        type: string
        required: true
        default: 'Manual Debug Build'
        description: 'Release Notes'
  push:
    branches:
      - main

jobs:
  configuration:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache local.properties
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  deploy:
    runs-on: ubuntu-24.04
    needs: configuration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Restore local.properties from cache
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: build debug version
        run: ./gradlew assembleDebug

      - name: Verify APK exists
        run: ls -l app/build/outputs/apk/debug/

      # Paso para configurar las credenciales de Google Cloud
      - name: Set up Google Cloud credentials
        run: |
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > /tmp/firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/firebase-service-account.json"

      # Instalar Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # Paso 4: Subir APK a Firebase App Distribution usando la acción de Firebase
      - name: Upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1

        with:
          appId: 1:337628677560:android:6ffd61ca5c79023f273b4d  # ID de la aplicación de Firebase
          serviceCredentialsFileContent: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}  # Contenido de las credenciales de Firebase
          groups: testers  # Grupo de testers
          file: app/build/outputs/apk/debug/app-debug.apk  # Ruta al APK que deseas subir
          releaseNotes: ${{ inputs.release_notes }}