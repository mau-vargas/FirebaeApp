name: Android CD
on:
  workflow_dispatch:
    inputs:
      release_notes:
        type: string
        required: true
        default: 'Manual Debug Build'
        description: 'Release Notes'
  push:
    branches:
      - main

jobs:
  configuration:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache local.properties
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  deploy:
    runs-on: ubuntu-24.04
    needs: configuration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Restore local.properties from cache
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: build debug version
        run: ./gradlew assembleDebug

      - name: Verify APK exists
        run: ls -l app/build/outputs/apk/debug/

      # Paso para configurar las credenciales de Google Cloud
      - name: Set up Google Cloud credentials
        run: |
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > /tmp/firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="/tmp/firebase-service-account.json"

      # Instalar Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Set up Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          export PATH=$PATH:$HOME/.firebase-tools

      # Paso 4: Subir APK a Firebase App Distribution usando la acción de Firebase
      #      - name: Upload artifact to Firebase App Distribution
      #        uses: wzieba/Firebase-Distribution-Github-Action@v1

      #        with:
      #          appId: 1:337628677560:android:6ffd61ca5c79023f273b4d  # ID de la aplicación de Firebase
      #          serviceCredentialsFileContent: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}  # Contenido de las credenciales de Firebase
      #          groups: testers  # Grupo de testers
      #          file: app/build/outputs/apk/debug/app-debug.apk  # Ruta al APK que deseas subir
      #          releaseNotes: ${{ inputs.release_notes }}

      #      - name: Distribute APK to Firebase App Distribution
      #        run: |
      #          firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk \
      #            --app 1:337628677560:android:6ffd61ca5c79023f273b4d \
      #            --groups testers \
      #            --release-notes Test \
      #            --debug

      # Distribuye el APK en Firebase App Distribution
      - name: Upload Artifact to Firebase App Distribution
        run: |
          # Bash script para distribuir la app
          set -o pipefail

   

          # Definición de variables
          RELEASE_NOTES=""
          RELEASE_NOTES_FILE=""

          TOKEN_DEPRECATED_WARNING_MESSAGE="⚠ This action will stop working with the next future major version of firebase-tools! Migrate to Service Account. See more: https://github.com/wzieba/Firebase-Distribution-Github-Action/wiki/FIREBASE_TOKEN-migration"

          # Configurar notas de la versión
          if [[ -z ${INPUT_RELEASENOTES} ]]; then
              RELEASE_NOTES="$(git log -1 --pretty=short)"
          else
              RELEASE_NOTES=${INPUT_RELEASENOTES}
          fi

          if [[ ${INPUT_RELEASENOTESFILE} ]]; then
              RELEASE_NOTES=""
              RELEASE_NOTES_FILE=${INPUT_RELEASENOTESFILE}
          fi

          # Si se pasa un archivo de credenciales, configurarlo
          if [ -n "${INPUT_SERVICECREDENTIALSFILE}" ] ; then
              export GOOGLE_APPLICATION_CREDENTIALS="${INPUT_SERVICECREDENTIALSFILE}"
          fi

          # Si se pasa el contenido de las credenciales, configurarlo
          if [ -n "${INPUT_SERVICECREDENTIALSFILECONTENT}" ] ; then
              cat <<< "${INPUT_SERVICECREDENTIALSFILECONTENT}" > service_credentials_content.json
              export GOOGLE_APPLICATION_CREDENTIALS="service_credentials_content.json"
          fi

          # Si se pasa un token, configurar la variable de entorno FIREBASE_TOKEN
          if [ -n "${INPUT_TOKEN}" ] ; then
              echo ${TOKEN_DEPRECATED_WARNING_MESSAGE}
              export FIREBASE_TOKEN="${INPUT_TOKEN}"
          fi

          # Distribuir la app
          firebase appdistribution:distribute "$INPUT_FILE" \
              --app "$INPUT_APPID" \
              --groups "$INPUT_GROUPS" \
              --testers "$INPUT_TESTERS" \
              --release-notes "RELEASE_NOTES" \
              ${INPUT_RELEASENOTESFILE:+ --release-notes-file "${RELEASE_NOTES_FILE}"} \
              $( (( $INPUT_DEBUG )) && printf %s '--debug' ) |
          {
              while read -r line; do
                echo $line

                if [[ $line == *"View this release in the Firebase console"* ]]; then
                  CONSOLE_URI=$(echo "$line" | sed -e 's/.*: //' -e 's/^ *//;s/ *$//')
                  echo "FIREBASE_CONSOLE_URI=$CONSOLE_URI" >>"$GITHUB_OUTPUT"
                elif [[ $line == *"Share this release with testers who have access"* ]]; then
                  TESTING_URI=$(echo "$line" | sed -e 's/.*: //' -e 's/^ *//;s/ *$//')
                  echo "TESTING_URI=$TESTING_URI" >>"$GITHUB_OUTPUT"
                elif [[ $line == *"Download the release binary"* ]]; then
                  BINARY_URI=$(echo "$line" | sed -e 's/.*: //' -e 's/^ *//;s/ *$//')
                  echo "BINARY_DOWNLOAD_URI=$BINARY_URI" >>"$GITHUB_OUTPUT"
                fi
              done
          }
        env:
          INPUT_FILE: "app/build/outputs/apk/debug/app-debug.apk"  # Ruta al APK
          INPUT_APPID: "1:337628677560:android:6ffd61ca5c79023f273b4d"  # ID de la app en Firebase
          INPUT_GROUPS: "testers"  # Grupo de testers
          INPUT_RELEASENOTES: "Test"  # Notas de la versión (puedes pasarlas como input)
          INPUT_SERVICECREDENTIALSFILECONTENT: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}"  # Contenido de las credenciales en JSON
          INPUT_TESTERS: "testers@example.com"  # Lista de testers (opcional)
          INPUT_DEBUG: "false"  # Depuración (puedes establecerlo a "true" si necesitas más información para depurar)

