name: Android CD

on:
  workflow_dispatch:
    inputs:
      release_notes:
        type: string
        required: true
        default: 'Manual Debug Build'
        description: 'Release Notes'
  push:
    branches:
      - main

jobs:
  configuration:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache local.properties
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  deploy:
    runs-on: ubuntu-24.04
    needs: configuration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Restore local.properties from cache
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Build debug version
        run: ./gradlew assembleDebug

      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          export PATH=$PATH:$HOME/.firebase-tools

      - name: Set up Firebase credentials
        run: |
          if [ -n "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" ]; then
            echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}" > service_credentials_content.json
            export GOOGLE_APPLICATION_CREDENTIALS="service_credentials_content.json"
          fi

      - name: Get release notes
        id: get_release_notes
        run: |
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            echo "RELEASE_NOTES=${{ github.event.inputs.release_notes }}" >> $GITHUB_ENV
          else
            RELEASE_NOTES=$(git log -1 --pretty=%B)
            echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV
          fi

      - name: Upload Artifact to Firebase App Distribution
        run: |
          firebase appdistribution:distribute "$INPUT_FILE" \
            --app "$INPUT_APP_ID" \
            --groups "$INPUT_GROUPS" \
            --testers "$INPUT_TESTERS" \
            ${RELEASE_NOTES:+--release-notes "$RELEASE_NOTES"} \
            $( (( $INPUT_DEBUG == "true" )) && echo "--debug" )
        env:
          INPUT_FILE: "app/build/outputs/apk/debug/app-debug.apk"
          INPUT_APP_ID: "${{ secrets.FIREBASE_APP_ID }}"
          INPUT_GROUPS: "testers"
          INPUT_TESTERS: "tester1@example.com,tester2@example.com" # Testers
          RELEASE_NOTES: ${{ env.RELEASE_NOTES }}
          INPUT_DEBUG: "false"
          FIREBASE_TOKEN: "${{ secrets.FIREBASE_TOKEN }}"  # Usar Firebase Token desde los secrets
