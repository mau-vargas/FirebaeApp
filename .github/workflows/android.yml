name: Android CD
on:
  workflow_dispatch:
    inputs:
      release_notes:
        type: string
        required: true
        default: 'Manual Debug Build'
        description: 'Release Notes'
  push:
    branches:
      - main

jobs:
  configuration:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache local.properties
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  deploy:
    runs-on: ubuntu-24.04
    needs: configuration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Restore local.properties from cache
        uses: actions/cache@v4
        with:
          path: ./local.properties
          key: ${{ runner.os }}-local-properties-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: build debug version
        run: ./gradlew assembleDebug

      - name: Verify APK exists
        run: ls -l app/build/outputs/apk/debug/

      # Instalar Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Set up Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          export PATH=$PATH:$HOME/.firebase-tools

      # Paso 4: Subir APK a Firebase App Distribution usando la acción de Firebase
      #      - name: Upload artifact to Firebase App Distribution
      #        uses: wzieba/Firebase-Distribution-Github-Action@v1

      #        with:
      #          appId: 1:337628677560:android:6ffd61ca5c79023f273b4d  # ID de la aplicación de Firebase
      #          serviceCredentialsFileContent: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}  # Contenido de las credenciales de Firebase
      #          groups: testers  # Grupo de testers
      #          file: app/build/outputs/apk/debug/app-debug.apk  # Ruta al APK que deseas subir
      #          releaseNotes: ${{ inputs.release_notes }}

      #      - name: Distribute APK to Firebase App Distribution
      #        run: |
      #          firebase appdistribution:distribute app/build/outputs/apk/debug/app-debug.apk \
      #            --app 1:337628677560:android:6ffd61ca5c79023f273b4d \
      #            --groups testers \
      #            --release-notes Test \
      #            --debug

      # Distribuye el APK en Firebase App Distribution
      - name: Upload Artifact to Firebase App Distribution
        run: |
          RELEASE_NOTES=""
          RELEASE_NOTES_FILE=""


          # Si se pasa el contenido de las credenciales, configurarlo
          if [ -n "${INPUT_SERVICECREDENTIALSFILECONTENT}" ] ; then
              cat <<< "${INPUT_SERVICECREDENTIALSFILECONTENT}" > service_credentials_content.json
              export GOOGLE_APPLICATION_CREDENTIALS="service_credentials_content.json"
          fi


          # Distribuir la app
          firebase appdistribution:distribute "$INPUT_FILE" \
              --app "$INPUT_APPID" \
              --groups "$INPUT_GROUPS" \
              --testers "$INPUT_TESTERS" \
              --release-notes "RELEASE_NOTES" \
              --release-notes-file "RELEASE_NOTES_FILE" \
              $( (( $INPUT_DEBUG )) && printf %s '--debug' ) 

        env:
          INPUT_FILE: "app/build/outputs/apk/debug/app-debug.apk"  # Ruta al APK
          INPUT_APPID: "1:337628677560:android:6ffd61ca5c79023f273b4d"  # ID de la app en Firebase
          INPUT_GROUPS: "testers"  # Grupo de testers
          INPUT_RELEASENOTES: "Test"  # Notas de la versión (puedes pasarlas como input)
          INPUT_SERVICECREDENTIALSFILECONTENT: "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}"  # Contenido de las credenciales en JSON
          INPUT_TESTERS: "testers@example.com"  # Lista de testers (opcional)
          INPUT_DEBUG: "false"  # Depuración (puedes establecerlo a "true" si necesitas más información para depurar)

